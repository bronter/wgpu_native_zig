const _misc = @import("misc.zig");
pub const U32_MAX = _misc.U32_MAX;
pub const U64_MAX = _misc.U64_MAX;
pub const USIZE_MAX = _misc.USIZE_MAX;
pub const WGPU_WHOLE_SIZE = _misc.WGPU_WHOLE_SIZE;
pub const WGPUBool = _misc.WGPUBool;
pub const WGPUFlags = _misc.WGPUFlags;
pub const Status = _misc.Status;
pub const OptionalBool = _misc.OptionalBool;
pub const FeatureName = _misc.FeatureName;
pub const SupportedFeaturesProcs = _misc.SupportedFeaturesProcs;
pub const SupportedFeatures = _misc.SupportedFeatures;
pub const IndexFormat = _misc.IndexFormat;
pub const CompareFunction = _misc.CompareFunction;
pub const getVersion = _misc.getVersion;
pub const WGPU_STRLEN = _misc.WGPU_STRLEN;
pub const StringView = _misc.StringView;

const _adapter = @import("adapter.zig");
pub const PowerPreference = _adapter.PowerPreference;
pub const AdapterType = _adapter.AdapterType;
pub const BackendType = _adapter.BackendType;
pub const FeatureLevel = _adapter.FeatureLevel;
pub const RequestAdapterOptions = _adapter.RequestAdapterOptions;
pub const RequestAdapterCallbackInfo = _adapter.RequestAdapterCallbackInfo;
pub const RequestAdapterCallback = _adapter.RequestAdapterCallback;
pub const AdapterInfo = _adapter.AdapterInfo;
pub const Adapter = _adapter.Adapter;

const _bind_group = @import("bind_group.zig");
pub const BindGroupLayoutEntryExtras = _bind_group.BindGroupLayoutEntryExtras;
pub const BindGroupLayoutEntry = _bind_group.BindGroupLayoutEntry;
pub const BindGroupLayoutDescriptor = _bind_group.BindGroupLayoutDescriptor;
pub const BindGroupLayoutProcs = _bind_group.BindGroupLayoutProcs;
pub const BindGroupLayout = _bind_group.BindGroupLayout;
pub const BindGroupEntryExtras = _bind_group.BindGroupEntryExtras;
pub const BindGroupEntry = _bind_group.BindGroupEntry;
pub const BindGroupDescriptor = _bind_group.BindGroupDescriptor;
pub const BindGroupProcs = _bind_group.BindGroupProcs;
pub const BindGroup = _bind_group.BindGroup;

const _buffer = @import("buffer.zig");
pub const WGPU_WHOLE_MAP_SIZE = _buffer.WGPU_WHOLE_MAP_SIZE;
pub const BufferBindingType = _buffer.BufferBindingType;
pub const BufferBindingLayout = _buffer.BufferBindingLayout;
pub const BufferUsage = _buffer.BufferUsage;
pub const BufferMapState = _buffer.BufferMapState;
pub const MapMode = _buffer.MapMode;
pub const MapAsyncStatus = _buffer.MapAsyncStatus;
pub const BufferMapCallbackInfo = _buffer.BufferMapCallbackInfo;
pub const BufferMapCallback = _buffer.BufferMapCallback;
pub const BufferDescriptor = _buffer.BufferDescriptor;
pub const BufferProcs = _buffer.BufferProcs;
pub const Buffer = _buffer.Buffer;

const _chained_struct = @import("chained_struct.zig");
pub const SType = _chained_struct.SType;
pub const ChainedStruct = _chained_struct.ChainedStruct;
pub const ChainedStructOut = _chained_struct.ChainedStructOut;

const _command_encoder = @import("command_encoder.zig");
pub const WGPU_DEPTH_SLICE_UNDEFINED = _command_encoder.WGPU_DEPTH_SLICE_UNDEFINED;
pub const WGPU_QUERY_SET_INDEX_UNDEFINED = _command_encoder.WGPU_QUERY_SET_INDEX_UNDEFINED;
pub const TimestampWrites = _command_encoder.TimestampWrites;
pub const ComputePassTimestampWrites = _command_encoder.ComputePassTimestampWrites;
pub const ComputePassDescriptor = _command_encoder.ComputePassDescriptor;
pub const CommandEncoderDescriptor = _command_encoder.CommandEncoderDescriptor;
pub const ComputePassEncoder = _command_encoder.ComputePassEncoder;
pub const LoadOp = _command_encoder.LoadOp;
pub const StoreOp = _command_encoder.StoreOp;
pub const Color = _command_encoder.Color;
pub const ColorAttachment = _command_encoder.ColorAttachment;
pub const DepthStencilAttachment = _command_encoder.DepthStencilAttachment;
pub const RenderPassTimestampWrites = _command_encoder.RenderPassTimestampWrites;
pub const RenderPassMaxDrawCount = _command_encoder.RenderPassMaxDrawCount;
pub const RenderPassDescriptor = _command_encoder.RenderPassDescriptor;
pub const RenderPassEncoderProcs = _command_encoder.RenderPassEncoderProcs;
pub const RenderPassEncoder = _command_encoder.RenderPassEncoder;
pub const CommandBufferDescriptor = _command_encoder.CommandBufferDescriptor;
pub const CommandBufferProcs = _command_encoder.CommandBufferProcs;
pub const CommandBuffer = _command_encoder.CommandBuffer;
pub const CommandEncoderProcs = _command_encoder.CommandEncoderProcs;
pub const CommandEncoder = _command_encoder.CommandEncoder;

const _device = @import("device.zig");
pub const DeviceLostReason = _device.DeviceLostReason;
pub const DeviceLostCallbackInfo = _device.DeviceLostCallbackInfo;
pub const DeviceLostCallback = _device.DeviceLostCallback;
pub const defaultDeviceLostCallback = _device.defaultDeviceLostCallback;
pub const DeviceExtras = _device.DeviceExtras;
pub const ErrorType = _device.ErrorType;
pub const UncapturedErrorCallback = _device.UncapturedErrorCallback;
pub const ErrorFilter = _device.ErrorFilter;
pub const UncapturedErrorCallbackInfo = _device.UncapturedErrorCallbackInfo;
pub const DeviceDescriptor = _device.DeviceDescriptor;
pub const RequestDeviceCallback = _device.RequestDeviceCallback;
pub const RequestDeviceCallbackInfo = _device.RequestDeviceCallbackInfo;
pub const PopErrorScopeStatus = _device.PopErrorScopeStatus;
pub const PopErrorScopeCallback = _device.PopErrorScopeCallback;
pub const PopErrorScopeCallbackInfo = _device.PopErrorScopeCallbackInfo;
pub const Device = _device.Device;

const _instance = @import("instance.zig");
pub const InstanceBackend = _instance.InstanceBackend;
pub const InstanceFlag = _instance.InstanceFlag;
pub const Dx12Compiler = _instance.Dx12Compiler;
pub const Gles3MinorVersion = _instance.Gles3MinorVersion;
pub const DxcMaxShaderModel = _instance.DxcMaxShaderModel;
pub const GLFenceBehaviour = _instance.GLFenceBehaviour;
pub const InstanceExtras = _instance.InstanceExtras;
pub const InstanceCapabilities = _instance.InstanceCapabilities;
pub const InstanceDescriptor = _instance.InstanceDescriptor;
pub const WGSLLanguageFeatureName = _instance.WGSLLanguageFeatureName;
pub const SupportedWGSLLanguageFeatures = _instance.SupportedWGSLLanguageFeatures;
pub const RegistryReport = _instance.RegistryReport;
pub const HubReport = _instance.HubReport;
pub const GlobalReport = _instance.GlobalReport;
pub const EnumerateAdapterOptions = _instance.EnumerateAdapterOptions;
pub const Instance = _instance.Instance;

const _limits = @import("limits.zig");
pub const WGPU_LIMIT_U32_UNDEFINED = _limits.WGPU_LIMIT_U32_UNDEFINED;
pub const WGPU_LIMIT_U64_UNDEFINED = _limits.WGPU_LIMIT_U64_UNDEFINED;
pub const Limits = _limits.Limits;
pub const WGPUNativeLimits = _limits.WGPUNativeLimits;

const _log = @import("log.zig");
pub const LogLevel = _log.LogLevel;
pub const LogCallback = _log.LogCallback;
pub const setLogCallback = _log.setLogCallback;
pub const setLogLevel = _log.setLogLevel;

const _pipeline = @import("pipeline.zig");
pub const PushConstantRange = _pipeline.PushConstantRange;
pub const PipelineLayoutExtras = _pipeline.PipelineLayoutExtras;
pub const PipelineLayoutDescriptor = _pipeline.PipelineLayoutDescriptor;
pub const PipelineLayoutProcs = _pipeline.PipelineLayoutProcs;
pub const PipelineLayout = _pipeline.PipelineLayout;
pub const ConstantEntry = _pipeline.ConstantEntry;
pub const ProgrammableStageDescriptor = _pipeline.ProgrammableStageDescriptor;
pub const ComputePipelineDescriptor = _pipeline.ComputePipelineDescriptor;
pub const CreatePipelineAsyncStatus = _pipeline.CreatePipelineAsyncStatus;
pub const CreateComputePipelineAsyncCallbackInfo = _pipeline.CreateComputePipelineAsyncCallbackInfo;
pub const CreateComputePipelineAsyncCallback = _pipeline.CreateComputePipelineAsyncCallback;
pub const ComputePipelineProcs = _pipeline.ComputePipelineProcs;
pub const ComputePipeline = _pipeline.ComputePipeline;
pub const VertexStepMode = _pipeline.VertexStepMode;
pub const VertexFormat = _pipeline.VertexFormat;
pub const VertexAttribute = _pipeline.VertexAttribute;
pub const VertexBufferLayout = _pipeline.VertexBufferLayout;
pub const VertexState = _pipeline.VertexState;
pub const PrimitiveTopology = _pipeline.PrimitiveTopology;
pub const FrontFace = _pipeline.FrontFace;
pub const CullMode = _pipeline.CullMode;
pub const PrimitiveState = _pipeline.PrimitiveState;
pub const StencilOperation = _pipeline.StencilOperation;
pub const StencilFaceState = _pipeline.StencilFaceState;
pub const DepthStencilState = _pipeline.DepthStencilState;
pub const MultisampleState = _pipeline.MultisampleState;
pub const BlendOperation = _pipeline.BlendOperation;
pub const BlendFactor = _pipeline.BlendFactor;
pub const BlendComponent = _pipeline.BlendComponent;
pub const BlendState = _pipeline.BlendState;
pub const ColorWriteMask = _pipeline.ColorWriteMask;
pub const ColorTargetState = _pipeline.ColorTargetState;
pub const FragmentState = _pipeline.FragmentState;
pub const RenderPipelineDescriptor = _pipeline.RenderPipelineDescriptor;
pub const RenderPipelineProcs = _pipeline.RenderPipelineProcs;
pub const RenderPipeline = _pipeline.RenderPipeline;
pub const CreateRenderPipelineAsyncCallbackInfo = _pipeline.CreateRenderPipelineAsyncCallbackInfo;
pub const CreateRenderPipelineAsyncCallback = _pipeline.CreateRenderPipelineAsyncCallback;

const _query_set = @import("query_set.zig");
pub const QueryType = _query_set.QueryType;
pub const PipelineStatisticName = _query_set.PipelineStatisticName;
pub const QuerySetDescriptorExtras = _query_set.QuerySetDescriptorExtras;
pub const QuerySetDescriptor = _query_set.QuerySetDescriptor;
pub const QuerySetProcs = _query_set.QuerySetProcs;
pub const QuerySet = _query_set.QuerySet;

const _queue = @import("queue.zig");
pub const SubmissionIndex = _queue.SubmissionIndex;
pub const QueueDescriptor = _queue.QueueDescriptor;
pub const WorkDoneStatus = _queue.WorkDoneStatus;
pub const QueueWorkDoneCallbackInfo = _queue.QueueWorkDoneCallbackInfo;
pub const QueueWorkDoneCallback = _queue.QueueWorkDoneCallback;
pub const QueueProcs = _queue.QueueProcs;
pub const Queue = _queue.Queue;

const _render_bundle = @import("render_bundle.zig");
pub const RenderBundleEncoderDescriptor = _render_bundle.RenderBundleEncoderDescriptor;
pub const RenderBundleEncoderProcs = _render_bundle.RenderBundleEncoderProcs;
pub const RenderBundleEncoder = _render_bundle.RenderBundleEncoder;
pub const RenderBundleDescriptor = _render_bundle.RenderBundleDescriptor;
pub const RenderBundleProcs = _render_bundle.RenderBundleProcs;
pub const RenderBundle = _render_bundle.RenderBundle;

const _sampler = @import("sampler.zig");
pub const SamplerBindingType = _sampler.SamplerBindingType;
pub const SamplerBindingLayout = _sampler.SamplerBindingLayout;
pub const AddressMode = _sampler.AddressMode;
pub const FilterMode = _sampler.FilterMode;
pub const MipmapFilterMode = _sampler.MipmapFilterMode;
pub const SamplerDescriptor = _sampler.SamplerDescriptor;
pub const SamplerProcs = _sampler.SamplerProcs;
pub const Sampler = _sampler.Sampler;

const _shader = @import("shader.zig");
pub const ShaderStage = _shader.ShaderStage;
pub const ShaderModuleDescriptor = _shader.ShaderModuleDescriptor;
pub const ShaderModuleDescriptorSpirV = _shader.ShaderModuleDescriptorSpirV;
pub const ShaderSourceSPIRV = _shader.ShaderSourceSPIRV;
pub const ShaderModuleSPIRVMergedDescriptor = _shader.ShaderModuleSPIRVMergedDescriptor;
pub const shaderModuleSPIRVDescriptor = _shader.shaderModuleSPIRVDescriptor;
pub const ShaderSourceWGSL = _shader.ShaderSourceWGSL;
pub const ShaderModuleWGSLMergedDescriptor = _shader.ShaderModuleWGSLMergedDescriptor;
pub const shaderModuleWGSLDescriptor = _shader.shaderModuleWGSLDescriptor;
pub const ShaderDefine = _shader.ShaderDefine;
pub const ShaderSourceGLSL = _shader.ShaderSourceGLSL;
pub const ShaderModuleGLSLMergedDescriptor = _shader.ShaderModuleGLSLMergedDescriptor;
pub const shaderModuleGLSLDescriptor = _shader.shaderModuleGLSLDescriptor;
pub const CompilationInfoRequestStatus = _shader.CompilationInfoRequestStatus;
pub const CompilationMessageType = _shader.CompilationMessageType;
pub const CompilationMessage = _shader.CompilationMessage;
pub const CompilationInfo = _shader.CompilationInfo;
pub const CompilationInfoCallback = _shader.CompilationInfoCallback;
pub const CompilationInfoCallbackInfo = _shader.CompilationInfoCallbackInfo;
pub const ShaderModuleProcs = _shader.ShaderModuleProcs;
pub const ShaderModule = _shader.ShaderModule;

const _surface = @import("surface.zig");
pub const SurfaceDescriptor = _surface.SurfaceDescriptor;
pub const SurfaceSourceAndroidNativeWindow = _surface.SurfaceSourceAndroidNativeWindow;
pub const MergedSurfaceDescriptorFromAndroidWindow = _surface.MergedSurfaceDescriptorFromAndroidWindow;
pub const surfaceDescriptorFromAndroidNativeWindow = _surface.surfaceDescriptorFromAndroidNativeWindow;
pub const SurfaceSourceMetalLayer = _surface.SurfaceSourceMetalLayer;
pub const MergedSurfaceDescriptorFromMetalLayer = _surface.MergedSurfaceDescriptorFromMetalLayer;
pub const surfaceDescriptorFromMetalLayer = _surface.surfaceDescriptorFromMetalLayer;
pub const SurfaceSourceWaylandSurface = _surface.SurfaceSourceWaylandSurface;
pub const MergedSurfaceDescriptorFromWaylandSurface = _surface.MergedSurfaceDescriptorFromWaylandSurface;
pub const surfaceDescriptorFromWaylandSurface = _surface.surfaceDescriptorFromWaylandSurface;
pub const SurfaceSourceWindowsHWND = _surface.SurfaceSourceWindowsHWND;
pub const MergedSurfaceDescriptorFromWindowsHWND = _surface.MergedSurfaceDescriptorFromWindowsHWND;
pub const surfaceDescriptorFromWindowsHWND = _surface.surfaceDescriptorFromWindowsHWND;
pub const SurfaceSourceXCBWindow = _surface.SurfaceSourceXCBWindow;
pub const MergedSurfaceDescriptorFromXcbWindow = _surface.MergedSurfaceDescriptorFromXcbWindow;
pub const surfaceDescriptorFromXcbWindow = _surface.surfaceDescriptorFromXcbWindow;
pub const SurfaceSourceXlibWindow = _surface.SurfaceSourceXlibWindow;
pub const MergedSurfaceDescriptorFromXlibWindow = _surface.MergedSurfaceDescriptorFromXlibWindow;
pub const surfaceDescriptorFromXlibWindow = _surface.surfaceDescriptorFromXlibWindow;
pub const CompositeAlphaMode = _surface.CompositeAlphaMode;
pub const PresentMode = _surface.PresentMode;
pub const SurfaceConfigurationExtras = _surface.SurfaceConfigurationExtras;
pub const SurfaceConfiguration = _surface.SurfaceConfiguration;
pub const SurfaceCapabilitiesProcs = _surface.SurfaceCapabilitiesProcs;
pub const SurfaceCapabilities = _surface.SurfaceCapabilities;
pub const GetCurrentTextureStatus = _surface.GetCurrentTextureStatus;
pub const SurfaceTexture = _surface.SurfaceTexture;
pub const SurfaceProcs = _surface.SurfaceProcs;
pub const Surface = _surface.Surface;

const _texture = @import("texture.zig");
pub const WGPU_ARRAY_LAYER_COUNT_UNDEFINED = _texture.WGPU_ARRAY_LAYER_COUNT_UNDEFINED;
pub const WGPU_MIP_LEVEL_COUNT_UNDEFINED = _texture.WGPU_MIP_LEVEL_COUNT_UNDEFINED;
pub const WGPU_COPY_STRIDE_UNDEFINED = _texture.WGPU_COPY_STRIDE_UNDEFINED;
pub const TextureFormat = _texture.TextureFormat;
pub const TextureUsage = _texture.TextureUsage;
pub const TextureAspect = _texture.TextureAspect;
pub const TextureViewDescriptor = _texture.TextureViewDescriptor;
pub const TextureViewProcs = _texture.TextureViewProcs;
pub const TextureView = _texture.TextureView;
pub const SampleType = _texture.SampleType;
pub const ViewDimension = _texture.ViewDimension;
pub const TextureBindingLayout = _texture.TextureBindingLayout;
pub const StorageTextureAccess = _texture.StorageTextureAccess;
pub const StorageTextureBindingLayout = _texture.StorageTextureBindingLayout;
pub const TextureDimension = _texture.TextureDimension;
pub const Extent3D = _texture.Extent3D;
pub const TextureDescriptor = _texture.TextureDescriptor;
pub const TextureProcs = _texture.TextureProcs;
pub const Texture = _texture.Texture;
pub const Origin3D = _texture.Origin3D;
pub const TexelCopyTextureInfo = _texture.TexelCopyTextureInfo;
pub const TexelCopyBufferLayout = _texture.TexelCopyBufferLayout;
pub const TexelCopyBufferInfo = _texture.TexelCopyBufferInfo;

const _async = @import("async.zig");
pub const CallbackMode = _async.CallbackMode;
pub const WaitStatus = _async.WaitStatus;
pub const Future = _async.Future;
pub const FutureWaitInfo = _async.FutureWaitInfo;

test "root" {
    // I've read that refAllDecls is considered a bit of a hack that might eventually get removed,
    // but right now it's a pretty effective way to run all tests without duplicates, and catch
    // syntax errors that were previously not covered by tests.
    @import("std").testing.refAllDecls(@This());
}